# Problem: Word Break
#
# Idea:
# Given a string and a dictionary of words, the goal is to determine whether the string can be segmented
# into space-separated words from the given dictionary. This problem can be efficiently solved using
# dynamic programming, and we explore three approaches: Memoization, Bottom-Up, and Space-Optimized Bottom-Up.
#
# Approach 1: Memoization
"""
This approach employs a recursive function with memoization to determine if a given string can be segmented.
The function starts from the beginning of the string and tries all possible prefixes to check if they exist in the dictionary.
The result is stored in a memoization table to avoid redundant calculations.

Algorithm:
1. Define a recursive helper function that takes the current index as a parameter.
2. Base case: If the index reaches the end of the string, return True.
3. If the result for the current index is already memoized, return it.
4. Iterate through all possible prefixes and recursively check if the remaining string can be segmented.
5. Memoize the result and return it.

Time Complexity: O(n^2 * k) - Each subproblem is solved once, and memoization avoids redundant calculations,
where 'n' is the length of the string, and 'k' is the maximum length of a word in the dictionary.
Space Complexity: O(n) - Memoization table.
"""
def wordBreak_top_down(s, wordDict):
    memo = {}

    def helper(index):
        if index == len(s):
            return True

        if index in memo:
            return memo[index]

        for end in range(index + 1, len(s) + 1):
            prefix = s[index:end]
            if prefix in wordDict and helper(end):
                memo[index] = True
                return True

        memo[index] = False
        return False

    return helper(0)


# Approach 2: Bottom-Up
"""
The bottom-up approach uses dynamic programming to iteratively determine if a given string can be
segmented into space-separated words from a given dictionary. We build a 1D table to store the results.

Algorithm:
1. Initialize a 1D table 'dp' to store whether the substring ending at each index can be segmented.
2. Set 'dp[0]' to True since an empty string is always segmented.
3. Iterate through indices and update 'dp' based on whether any prefix ending at the current index exists
   in the dictionary and the previous substring can be segmented.
4. The final result is stored in 'dp[len(s)]'.

Time Complexity: O(n^2 * k) - Each subproblem is solved once.
Space Complexity: O(n) - 1D table.
"""
def wordBreak_bottom_up(s, wordDict):
    dp = [False] * (len(s) + 1)
    dp[0] = True

    for i in range(1, len(s) + 1):
        for j in range(i):
            if dp[j] and s[j:i] in wordDict:
                dp[i] = True
                break

    return dp[len(s)]


# Approach 3: Space-Optimized Bottom-Up
"""
The space-optimized bottom-up approach reduces the space complexity by only storing the
results for the current and previous indices. We use two variables to represent the 'current'
and 'previous' indices.

Algorithm:
1. Initialize variables 'cur' and 'prev' to store whether the substring ending at each index can be segmented.
2. Set 'cur[0]' to True since an empty string is always segmented.
3. Iterate through indices and update 'cur' based on whether any prefix ending at the current index exists
   in the dictionary and the previous substring can be segmented.
4. Update 'prev' with the values from 'cur' for the next iteration.
5. The final result is stored in 'cur[len(s)]'.

Time Complexity: O(n^2 * k) - Each subproblem is solved once.
Space Complexity: O(n) - Two variables for 'cur' and 'prev'.
"""
def wordBreak_space_optimized(s, wordDict):
    prev, cur = True, False

    for i in range(1, len(s) + 1):
        cur, prev = False, cur
        for j in range(i):
            if prev and s[j:i] in wordDict:
                cur = True
                break

    return cur
