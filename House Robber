# Memorization (Top-Down) Approach
def rob_memo(nums):
    memo = {}

    def helper(idx):
        if idx < 0:
            return 0
        if idx in memo:
            return memo[idx]

        result = max(helper(idx - 2) + nums[idx], helper(idx - 1))
        memo[idx] = result

        return result

    return helper(len(nums) - 1)

# Tabular (Bottom-Up) Approach
def rob_tabular(nums):
    if not nums:
        return 0

    n = len(nums)
    if n == 1:
        return nums[0]

    dp = [0] * n
    dp[0] = nums[0]
    dp[1] = max(nums[0], nums[1])

    for i in range(2, n):
        dp[i] = max(dp[i - 2] + nums[i], dp[i - 1])

    return dp[-1]

# Space-Optimized Tabular Approach
def rob_space_optimized(nums):
    if not nums:
        return 0

    n = len(nums)
    if n == 1:
        return nums[0]

    prev, curr = nums[0], max(nums[0], nums[1])

    for i in range(2, n):
        temp = curr
        curr = max(prev + nums[i], curr)
        prev = temp

    return curr

# Example Usage
nums = [2, 7, 9, 3, 1]

print("Memoization Approach:", rob_memo(nums))
print("Tabular Approach:", rob_tabular(nums))
print("Space-Optimized Tabular Approach:", rob_space_optimized(nums))
