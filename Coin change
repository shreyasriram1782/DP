# Approach 1: Memoization
"""
This approach uses a recursive function with memoization to find the minimum number of coins
needed to make up the given amount. Starting from the target amount, we explore all possible
coin choices at each step. The result is stored in a memoization table to avoid redundant calculations.

Algorithm:
1. Define a recursive helper function that takes the current amount as a parameter.
2. Base case: If the amount becomes zero, return 0.
3. If the result for the current amount is already memoized, return it.
4. Initialize 'min_coins' to infinity.
5. For each coin, calculate the number of coins needed for the remaining amount.
6. Update 'min_coins' with the minimum number of coins among all choices.
7. Memoize the result and return 'min_coins + 1'.

Time Complexity: O(amount * coins) - Each subproblem is solved once, and memoization avoids redundant calculations.
Space Complexity: O(amount) - Memoization table.
"""
def coinChange_top_down(coins, amount):
    memo = {}

    def helper(target):
        if target == 0:
            return 0

        if target in memo:
            return memo[target]

        min_coins = float('inf')

        for coin in coins:
            if target - coin >= 0:
                min_coins = min(min_coins, 1 + helper(target - coin))

        memo[target] = min_coins
        return min_coins

    result = helper(amount)
    return result if result != float('inf') else -1


# Approach 2: Bottom-Up
"""
The bottom-up approach uses dynamic programming to iteratively find the minimum number of coins
needed to make up each amount from 0 to the target amount. We build a 1D table to store the results.

Algorithm:
1. Initialize a 1D table 'dp' to store the minimum number of coins for each amount.
2. Iterate through amounts from 1 to the target amount.
3. For each amount, calculate the minimum number of coins needed by considering all coin choices.
4. The final result is stored in 'dp[target]'.

Time Complexity: O(amount * coins) - Each subproblem is solved once.
Space Complexity: O(amount) - 1D table.
"""
def coinChange_bottom_up(coins, amount):
    dp = [float('inf')] * (amount + 1)
    dp[0] = 0

    for i in range(1, amount + 1):
        for coin in coins:
            if i - coin >= 0:
                dp[i] = min(dp[i], 1 + dp[i - coin])

    return dp[amount] if dp[amount] != float('inf') else -1


# Approach 3: Space-Optimized Bottom-Up
"""
The space-optimized bottom-up approach reduces the space complexity by only storing the
results for the current and previous amounts. We use two variables to represent the 'current'
and 'previous' amounts.

Algorithm:
1. Initialize variables 'cur' and 'prev' to store the minimum number of coins for each amount.
2. Iterate through amounts from 1 to the target amount.
3. For each amount, calculate the minimum number of coins needed by considering all coin choices.
4. Update 'prev' with the value from 'cur' for the next iteration.

Time Complexity: O(amount * coins) - Each subproblem is solved once.
Space Complexity: O(1) - Two variables for 'cur' and 'prev'.
"""
def coinChange_space_optimized(coins, amount):
    cur, prev = float('inf'), float('inf')
    cur = 0

    for i in range(1, amount + 1):
        for coin in coins:
            if i - coin >= 0:
                cur = min(cur, 1 + prev)

        prev, cur = cur, prev

    return prev if prev != float('inf') else -1
