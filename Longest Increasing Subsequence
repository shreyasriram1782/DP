# Problem: Longest Increasing Subsequence
#
# Idea:
# The problem is to find the length of the longest increasing subsequence in an array of integers.
# Dynamic programming can be utilized to solve this efficiently. We explore three approaches: Memoization,
# Bottom-Up, and Space-Optimized Bottom-Up.
#
# Approach 1: Memoization
"""
This approach employs a recursive function with memoization to find the length of the longest increasing subsequence.
The function starts from the beginning of the array and recursively explores all possible subsequences.
The result is stored in a memoization table to avoid redundant calculations.

Algorithm:
1. Define a recursive helper function that takes the current index as a parameter.
2. Base case: If the index reaches the end of the array, return 0.
3. If the result for the current index is already memoized, return it.
4. For each index, iterate through the remaining array elements and find the length of increasing subsequences.
5. Memoize the result, considering the current element and skipping it, and return the maximum length.

Time Complexity: O(n^2) - Each subproblem is solved once, and memoization avoids redundant calculations,
where 'n' is the length of the array.
Space Complexity: O(n) - Memoization table.
"""
def lengthOfLIS_top_down(nums):
    memo = {}

    def helper(current_index):
        if current_index == len(nums):
            return 0

        if current_index in memo:
            return memo[current_index]

        max_length = 0

        for next_index in range(current_index + 1, len(nums)):
            if nums[next_index] > nums[current_index]:
                max_length = max(max_length, 1 + helper(next_index))

        memo[current_index] = max_length
        return max_length

    result = 0
    for i in range(len(nums)):
        result = max(result, 1 + helper(i))

    return result


# Approach 2: Bottom-Up
"""
The bottom-up approach uses dynamic programming to iteratively find the length of the longest increasing subsequence.
It builds a 1D table to store the results.

Algorithm:
1. Initialize a 1D table 'dp' to store the length of the longest increasing subsequence ending at each index.
   Initialize all elements of 'dp' to 1.
2. Iterate through indices and update 'dp' based on the lengths of increasing subsequences for previous indices.
3. The final result is the maximum value in 'dp'.

Time Complexity: O(n^2) - Each subproblem is solved once.
Space Complexity: O(n) - 1D table.
"""
def lengthOfLIS_bottom_up(nums):
    if not nums:
        return 0

    n = len(nums)
    dp = [1] * n

    for i in range(1, n):
        for j in range(i):
            if nums[i] > nums[j]:
                dp[i] = max(dp[i], dp[j] + 1)

    return max(dp)


# Approach 3: Space-Optimized Bottom-Up
"""
The space-optimized bottom-up approach reduces space complexity by using a 1D array to store the length of the
longest increasing subsequence. We update this array iteratively.

Algorithm:
1. Initialize a 1D array 'dp' to store the length of the longest increasing subsequence.
   Initialize all elements of 'dp' to 1.
2. Iterate through indices and update 'dp' based on the lengths of increasing subsequences for previous indices.
3. The final result is the maximum value in 'dp'.

Time Complexity: O(n^2) - Each subproblem is solved once.
Space Complexity: O(n) - 1D array.
"""
def lengthOfLIS_space_optimized(nums):
    if not nums:
        return 0

    n = len(nums)
    dp = [1] * n

    for i in range(1, n):
        for j in range(i):
            if nums[i] > nums[j]:
                dp[i] = max(dp[i], dp[j] + 1)

    return max(dp)
