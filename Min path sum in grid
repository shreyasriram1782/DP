def minPathSum_top_down(grid):
    if not grid or not grid[0]:
        return 0
    
    m, n = len(grid), len(grid[0])
    memo_top_down = {}

    def helper_top_down(i, j):
        if i < 0 or j < 0:
            return float('inf')

        if (i, j) in memo_top_down:
            return memo_top_down[(i, j)]

        if i == 0 and j == 0:
            return grid[i][j]

        memo_top_down[(i, j)] = grid[i][j] + min(helper_top_down(i - 1, j), helper_top_down(i, j - 1))
        return memo_top_down[(i, j)]

    result_top_down = helper_top_down(m - 1, n - 1)


    # Bottom-Up (Tabular) Approach:
    dp_tabular = [[0] * n for _ in range(m)]

    for i in range(m):
        for j in range(n):
            if i == 0 and j == 0:
                dp_tabular[i][j] = grid[i][j]
            elif i == 0:
                dp_tabular[i][j] = dp_tabular[i][j - 1] + grid[i][j]
            elif j == 0:
                dp_tabular[i][j] = dp_tabular[i - 1][j] + grid[i][j]
            else:
                dp_tabular[i][j] = grid[i][j] + min(dp_tabular[i - 1][j], dp_tabular[i][j - 1])


    # Space-Optimized Tabular Approach:
    dp_space_optimized = [0] * n
    dp_space_optimized[0] = grid[0][0]

    for j in range(1, n):
        dp_space_optimized[j] = dp_space_optimized[j - 1] + grid[0][j]

    for i in range(1, m):
        dp_space_optimized[0] += grid[i][0]
        for j in range(1, n):
            dp_space_optimized[j] = grid[i][j] + min(dp_space_optimized[j], dp_space_optimized[j - 1])

    result_tabular_space_optimized = dp_space_optimized[-1]

    return result_top_down, dp_tabular[-1][-1], result_tabular_space_optimized

# Example Usage:
grid = [
    [1, 3, 1],
    [1, 5, 1],
    [4, 2, 1]
]

result_top_down, result_tabular, result_space_optimized = minPathSum_top_down(grid)

print("Top-Down (Memorization) Approach:", result_top_down)
print("Bottom-Up (Tabular) Approach:", result_tabular)
print("Space-Optimized Tabular Approach:", result_space_optimized)
